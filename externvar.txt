/*Extern variables used */
/* These data types used in both cv_blob_locator.c and video_capture.c */
typedef unsigned char       uint8_t;  /*8 bit unsigned char */
typedef   signed char        int8_t;  /*8 bit signed char */
typedef unsigned short     uint16_t;  /*16 bit unsigned short */
typedef   signed short      int16_t;  /*16 bit signed short */
typedef unsigned long      uint32_t;  /*32 bit unsigned long */
typedef   signed long       int32_t;  /*32 bit signed long */
typedef unsigned long long uint64_t;  /*64 bit unsigned long */
typedef   signed long long  int64_t;  /*64 bit signed long */


/* extern variables in file cv_blob_locator.h : line 31 - 71 */

extern uint8_t color_lum_min; //lower upper middle filter minimum range value
extern uint8_t color_lum_max; //lower upper middle filter maximum range value

extern uint8_t color_cb_min;  //minimum range value blue chromiance
extern uint8_t color_cb_max;  //maximum range value blue chromiance

extern uint8_t color_cr_min; //minimum range value red chromiance
extern uint8_t color_cr_max; //maximum range value red chromiance

extern uint8_t cv_blob_locator_reset; //reset option for blob locator
extern uint8_t cv_blob_locator_type;  //blob locator type to be identified in image

extern int marker_size; //size of the marker
extern int geofilter_length; //length of time the geofilter will be active
extern int record_video; //size of video
extern void cv_blob_locator_init(void); //initializing the global variables

extern void cv_blob_locator_event(void); //state maintained based on blob_locator_type

extern void cv_blob_locator_start(void); 
extern void start_vision(void); //Start the recording the video via camera
extern void start_vision_land(void); //Continue the video recording and mark the regions occupied by any objects
extern void stop_vision(void); //stop the video once the blob regions identified
extern void cv_blob_locator_stop(void); 


/* global variables and functions in cv_blob_locator.c */

volatile uint32_t blob_locator;
volatile bool blob_enabled ; //blob
volatile bool marker_enabled; //marker 
volatile bool window_enabled; //window 
uint16_t coordinate[2]; //the image pixel coordinates 
uint16_t response; //the response 
uint32_t integral_image[img->w * img->h]; // the height and width of the bolb 


struct image_t *cv_marker_func(struct image_t *img); //marker function  event listener binds to the device
struct image_t *cv_window_func(struct image_t *img); //window function event listener binds to the device
struct image_t *cv_blob_locator_func(struct image_t *img); //blob locator function event listener binds to the device


/* global variables and functions in file cv.h */

extern bool add_video_device(struct video_config_t *device); //New video device add to the threads exisiting

// register a processing function and initialize the video device if necessary
extern struct video_listener *cv_add_to_device(struct video_config_t *device, cv_function func, uint16_t fps); 

 
// register a processing function and initialize the video device if necessary
// Add asynchronous structure to override default synchronous behavior along with mutex and conditional variable
// initialized. Then deliberate to a pthread as a listener
extern struct video_listener *cv_add_to_device_async(struct video_config_t *device, cv_function func, int nice_level, uint16_t fps);

//Check for listener state , send images to async thread if async is set or execute the listener associated with device 
extern void cv_run_device(struct video_config_t *device, struct image_t *img);


/* global variables and functions in file video_capture.h */
extern bool video_capture_take_shot;
extern void video_capture_init(void); // initialize the video capture for vision 
extern void video_capture_shoot(void);


/* global variables and functions in file video_capture.c */
bool video_capture_take_shot = false;
int video_capture_index = 0; /* initialize the image location index as 0*/
void video_capture_save(struct image_t *img);
struct image_t *video_capture_func(struct image_t *img);




/*External structures used*/
/*Used in cv.h, video_capture.c Line:121*/
/* Main image structure used globally */
struct image_t {
  enum image_type type;   ///< The image type
  uint16_t w;             ///< Image width
  uint16_t h;             ///< Image height
  struct timeval ts;      ///< The timestamp of creation
  struct FloatEulers *eulerAngles;   ///< Pointer to the Euler Angles
  uint32_t pprz_ts;       ///< The timestamp in us since system startup

  uint8_t buf_idx;        ///< Buffer index for V4L2 freeing
  uint32_t buf_size;      ///< The buffer size
  void *buf;              ///< Image buffer (depending on the image_type)
};

//used in blob_locator.c Line:328
struct camera_frame_t {
  int32_t w;     ///< Frame width [px]
  int32_t h;     ///< Frame height [px]
  int32_t f;     ///< Camera Focal length in [px]
  int32_t px;    ///< Target pixel coordinate (left = 0)
  int32_t py;    ///< Target pixel coordinate (top = 0)
};


// georeference_init(); used in cv_blob_locator.c  Line:348
struct georeference_t {
  struct Int32Vect3 target_i;   ///< Target in pixels, with z being the focal length in pixels, x=up,y=right,out
  struct Int32Vect3 target_l;   ///< Target in meters, relative to the drone in LTP frame

  struct Int32Vect3 x_t;        ///< Target coordinates NED

  struct georeference_filter_t filter;  ///< Filter waypoint location
};

//available in blob_finder.h and used in cv_blob_locator.c in image_labelling Line:172

// Blob object: connected pixels 
struct image_label_t {
  uint16_t id;              ///< Blob number
  uint8_t filter;           ///< Which filter triggered this blob

  uint32_t pixel_cnt;       ///< Number of pixels in the blob
  uint16_t x_min;           ///< Top left corner
  uint16_t y_min;
  uint32_t x_sum;           ///< Sum of all x coordinates (used to find center of gravity)
  uint32_t y_sum;

  struct point_t contour[512];
  uint16_t contour_cnt;

  uint16_t corners[4];
};

// Image point structure used inside image label structure 
struct point_t {
  uint32_t x;             ///< The x coordinate of the point
  uint32_t y;             ///< The y coordinate of the point
  uint16_t count;         ///< Number of times the point has been tracked successfully
  uint16_t x_sub;     ///< The x subpixel coordinate of the point
  uint16_t y_sub;         ///< The y subpixel coordinate of the point
};

//Marker deviation structure used in cv_blob_locator at Line:73
struct marker_deviation_t {
  int32_t x;
  int32_t y;
  uint16_t inlier;
};

//image filter structure YUV Color Filter Parameters used in cv_blob_locator.c Line:152
struct image_filter_t {
  uint8_t y_min;            ///< YUV color filter
  uint8_t y_max;
  uint8_t u_min;
  uint8_t u_max;
  uint8_t v_min;
  uint8_t v_max;
};

 struct cv_async {
  pthread_t thread_id; /*hold a generated Pthread id*/
  volatile bool thread_running; /*shows the thread_running status, volatile is used to avoid compiler simplifiaction of the variable*/
  volatile int thread_priority; /*holds th priority of the thread*/
  pthread_mutex_t img_mutex; /* Mutex for process synchronization and concurrency handling*/
  pthread_cond_t img_available;/*pthread condition variable to show status of image availabilty*/
  volatile bool img_processed; /*to denote the modification in the recorded image*/
  struct image_t img_copy; /*to hold the copy of the image*/
};

struct video_listener {
  struct video_listener *next; /* self reference pointer points to the address of the next listerner of same type*/
  struct cv_async *async;  /* pointer points to pthread struct along with image copy*/
  struct timeval ts;
  cv_function func; /*Pointer to image raw structure*/

  // Can be set by user
  uint16_t maximum_fps; /*frames per second*/
  volatile bool active; /*video listener state*/
};