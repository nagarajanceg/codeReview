/*Extern variables used */
/* These data types used in both cv_blob_locator.c and video_capture.c */
typedef unsigned char       uint8_t;/*8 bit unsigned char */
typedef   signed char        int8_t;/*8 bit signed char */
typedef unsigned short     uint16_t; /*16 bit unsigned short */
typedef   signed short      int16_t;/*16 bit signed short */
typedef unsigned long      uint32_t;/*32 bit unsigned long */
typedef   signed long       int32_t;/*32 bit signed long */
typedef unsigned long long uint64_t; /*64 bit unsigned long */
typedef   signed long long  int64_t; /*64 bit signed long */

// file cv_blob_locator.h
// extern variables from line 31 - 71

extern uint8_t color_lum_min; //lower upper middle filter minimum range value
extern uint8_t color_lum_max; //lower upper middle filter maximum range value

extern uint8_t color_cb_min;  //minimum range value blue chromiance
extern uint8_t color_cb_max;  //maximum range value blue chromiance

extern uint8_t color_cr_min; //minimum range value red chromiance
extern uint8_t color_cr_max; //maximum range value red chromiance

extern uint8_t cv_blob_locator_reset; //reset option for blob locator
extern uint8_t cv_blob_locator_type;  //blob locator type to be identified in image

extern int marker_size; //size of the marker
extern int geofilter_length; //length of time the geofilter will be active
extern int record_video; //size of video
extern void cv_blob_locator_init(void); //initializing the global variables

extern void cv_blob_locator_event(void); //state maintained based on blob_locator_type

extern void cv_blob_locator_start(void); 
extern void start_vision(void); //Start the recording the video via camera
extern void start_vision_land(void); //Continue the video recording and mark the regions occupied by any objects
extern void stop_vision(void); //stop the video once the blob regions identified
extern void cv_blob_locator_stop(void); 

/*External structuures used*/
/*Used in cv.h, video_capture.c Line:121*/
/* Main image structure used globally */
struct image_t {
  enum image_type type;   ///< The image type
  uint16_t w;             ///< Image width
  uint16_t h;             ///< Image height
  struct timeval ts;      ///< The timestamp of creation
  struct FloatEulers *eulerAngles;   ///< Pointer to the Euler Angles
  uint32_t pprz_ts;       ///< The timestamp in us since system startup

  uint8_t buf_idx;        ///< Buffer index for V4L2 freeing
  uint32_t buf_size;      ///< The buffer size
  void *buf;              ///< Image buffer (depending on the image_type)
};

//used in blob_locator.c Line:328
struct camera_frame_t {
  int32_t w;     ///< Frame width [px]
  int32_t h;     ///< Frame height [px]
  int32_t f;     ///< Camera Focal length in [px]
  int32_t px;    ///< Target pixel coordinate (left = 0)
  int32_t py;    ///< Target pixel coordinate (top = 0)
};


// georeference_init(); used in cv_blob_locator.c  Line:348
struct georeference_t {
  struct Int32Vect3 target_i;   ///< Target in pixels, with z being the focal length in pixels, x=up,y=right,out
  struct Int32Vect3 target_l;   ///< Target in meters, relative to the drone in LTP frame

  struct Int32Vect3 x_t;        ///< Target coordinates NED

  struct georeference_filter_t filter;  ///< Filter waypoint location
};

/*available in blob_finder.h and used in cv_blob_locator.c in image_labelling Line:172*/
/* Blob object: connected pixels */
struct image_label_t {
  uint16_t id;              ///< Blob number
  uint8_t filter;           ///< Which filter triggered this blob

  uint32_t pixel_cnt;       ///< Number of pixels in the blob
  uint16_t x_min;           ///< Top left corner
  uint16_t y_min;
  uint32_t x_sum;           ///< Sum of all x coordinates (used to find center of gravity)
  uint32_t y_sum;

  struct point_t contour[512];
  uint16_t contour_cnt;

  uint16_t corners[4];
};
/* Image point structure used inside image label structure */
struct point_t {
  uint32_t x;             ///< The x coordinate of the point
  uint32_t y;             ///< The y coordinate of the point
  uint16_t count;         ///< Number of times the point has been tracked successfully
  uint16_t x_sub;     ///< The x subpixel coordinate of the point
  uint16_t y_sub;         ///< The y subpixel coordinate of the point
};
/*Marker deviation structure used in cv_blob_locator at Line:73*/
struct marker_deviation_t {
  int32_t x;
  int32_t y;
  uint16_t inlier;
};

/*image filter structure YUV Color Filter Parameters used in cv_blob_locator.c Line:152*/
struct image_filter_t {
  uint8_t y_min;            ///< YUV color filter
  uint8_t y_max;
  uint8_t u_min;
  uint8_t u_max;
  uint8_t v_min;
  uint8_t v_max;
};

